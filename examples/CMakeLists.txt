project(circle_gardient)
project(mousePosition)
project(checkCollisionPointRec)
project(randomPixelWalking)
project(frameCounter)
project(checkCollisionRecs)
project(collisionWithWindow)
project(drawPoly)
project(eyeProject)
project(dvdProject)
project(drawCube)
project(camera3D)

add_executable(circle_gardient circle_gardient.cpp)
add_executable(mousePosition mousePosition.cpp)
add_executable(checkCollisionPointRec checkCollisionPointRec.cpp)
add_executable(randomPixelWalking randomPixelWalking.cpp)
add_executable(frameCounter frameCounter.cpp)
add_executable(checkCollisionRecs checkCollisionRecs.cpp)
add_executable(collisionWithWindow collisionWithWindow.cpp)
add_executable(drawPoly drawPoly.cpp)
add_executable(eyeProject eyeProject.cpp)
add_executable(dvdProject dvdProject.cpp)
add_executable(drawCube drawCube.cpp)
add_executable(camera3D camera3D.cpp)

include_directories(
    PUBLIC ../external/raylib/include/
)

link_directories(
    PRIVATE ../external/raylib/src/
)

IF(WIN32)
    target_link_libraries(circle_gardient raylib opengl32 gdi32 winmm)
    target_link_libraries(mousePosition raylib opengl32 gdi32 winmm)
    target_link_libraries(checkCollisionPointRec raylib opengl32 gdi32 winmm)
    target_link_libraries(randomPixelWalking raylib opengl32 gdi32 winmm)
    target_link_libraries(frameCounter raylib opengl32 gdi32 winmm)
    target_link_libraries(checkCollisionRecs raylib opengl32 gdi32 winmm)
    target_link_libraries(collisionWithWindow raylib opengl32 gdi32 winmm)
    target_link_libraries(drawPoly raylib opengl32 gdi32 winmm)
    target_link_libraries(eyeProject raylib opengl32 gdi32 winmm)
    target_link_libraries(dvdProject raylib opengl32 gdi32 winmm)
    target_link_libraries(drawCube raylib opengl32 gdi32 winmm)
    target_link_libraries(camera3D raylib opengl32 gdi32 winmm)
ELSEIF(UNIX)
    target_link_libraries(circle_gardient raylib)
    target_link_libraries(mousePosition raylib)
    target_link_libraries(checkCollisionPointRec raylib)
    target_link_libraries(randomPixelWalking raylib)
    target_link_libraries(frameCounter raylib)
    target_link_libraries(checkCollisionRecs raylib)
    target_link_libraries(collisionWithWindow raylib)
    target_link_libraries(drawPoly raylib)
    target_link_libraries(eyeProject raylib)
    target_link_libraries(dvdProject raylib)
    target_link_libraries(drawCube raylib)
    target_link_libraries(camera3D raylib)
ENDIF()
